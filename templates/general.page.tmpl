{{template "base" .}}



{{define "css"}}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
<link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
{{end}}

{{define "content"}}

<style>
  .red-text {
    color: red;
  }

  .datepicker-picker {
    z-index: 10000;
  }
</style>


<div class="container">

    <<div class="row g-3 mt-5">
        <div class="col">
            <img src="{{index .StringMap "res_path"}}/images/general.png" alt="" srcset=""
                class="room-image img-fluid mx-auto d-block">
        </div>




</div>


<div class="text-center mt-5 mx-4 mb-5">

    <h1> General Suite </h1>
    <p class="mt-2">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Cum itaque obcaecati provident, molestias
        eligendi
        earum suscipit non quibusdam? Officia optio eius excepturi aliquam, hic fuga totam nam iste blanditiis
        aspernatur! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Optio vel error facere quae corporis sit
        maxime exercitationem saepe culpa totam! Soluta aspernatur optio distinctio dolor quo unde exercitationem
        aperiam magni? Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quos aut consectetur necessitatibus
        atque. Ab animi doloremque id eos cumque officiis explicabo numquam. Molestiae, culpa eaque ex officiis enim
        voluptatum dignissimos!</p>



    <button type="button" name="" id="check" class="btn btn-primary">Check availability</button>




</div>

<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
<script src="https://unpkg.com/notie"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

    let attention = prompt();

    let button = document.getElementById("check");

    button.addEventListener("click", function () {
        attention.inputDates("Mantul", "Mantaap");
    });


    function notify(msg, msgType) {
        notie.alert({
            type: msgType,
            text: msg,
            position: "bottom"
        })
    }

    function sweetAlert(title, html, icon, confirmButtonText) {
        Swal.fire({
            title: title,
            html: html,
            icon: icon,
            confirmButtonText: confirmButtonText,
        })
    }

    function prompt() {

        let toast = function (param) {
            const Toast = Swal.mixin({
                toast: true,
                position: param.pos ?? "top-end",
                showConfirmButton: false,
                timer: 3000,
                icon: param.icon ?? "success",
                title: param.msg ?? "",
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.onmouseenter = Swal.stopTimer;
                    toast.onmouseleave = Swal.resumeTimer;
                }
            });
            Toast.fire();
        }

        let success = function (title, msg) {
            Swal.fire({
                title: title ?? "Success",
                text: msg ?? "You're awesome",
                icon: "success"
            });
        }

        let error = function (title, msg) {
            Swal.fire({
                title: title ?? "Success",
                text: msg ?? "You're awesome",
                icon: "error"
            });
        }

        let inputDates = async function () {


            let htmlDate = `

<form name="pickerInside", action="" class="mt-3 needs-validation px-3" method="GET" novalidate>
  <div class="row" id="range-picker-inside">
    <div class="col">

    <div class="mb-3">
      <input disabled type="text" class="form-control" id="start-inside" name="start" aria-describedby="startDate" required placeHolder="Arrival">
      <div class="invalid-feedback">
        Please input a date
      </div>
    </div>

  </div>

  <div class="col">

    <div class="mb-3">
      <input disabled type="text" class="form-control" id="end-inside" name="end" aria-describedby="endDate" required placeHolder="Departure">
      <div class="invalid-feedback">
        Please input a date
      </div>
    </div>

  </div>
</div>

<button type="submit" class="btn btn-primary mt-3">Check for availability</button>


</form>
  `;

            const { value: formValues } = await Swal.fire({
                title: "Search for Availability",
                html: htmlDate,
                confirmButtonText: "Check for Availabilty",
                showConfirmButton: false,
                willOpen: () => {

                    const elem = document.getElementById("range-picker-inside");
                    const rangepicker = new DateRangePicker(elem, {
                        orientation: "top auto",
                        buttonClass: "btn",
                    });

                    const forms = document.querySelectorAll('.needs-validation');
                    Array.from(forms).forEach(form => {

                        form.addEventListener('submit', function (event) {
                            if (!form.checkValidity()) {
                                event.preventDefault();
                                event.stopPropagation();

                            } else {
                                Swal.clickConfirm();
                            }

                            form.classList.add('was-validated');



                        });



                    });
                },

                didOpen: () => {
                    const start = document.getElementById("start-inside");
                    start.removeAttribute("disabled");

                    const end = document.getElementById("end-inside");
                    end.removeAttribute("disabled");

                    // document.pickerInside.submit();

                },

                preConfirm: () => {



                    return [


                        document.getElementById("start-inside").value,
                        document.getElementById("end-inside").value,
                    ];

                },



            });

            if (formValues) {
                Swal.fire(JSON.stringify(formValues));
            }

        }

        return {
            toast: toast,
            success: success,
            error: error,
            inputDates: inputDates,
        }

    }

</script>

{{end}}