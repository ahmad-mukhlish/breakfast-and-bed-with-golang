{{define "base"}}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Breakfast and Bed</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link href="{{index .StringMap "res_path"}}/css/stylesheet.css" rel="stylesheet" crossorigin="anonymous">
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

    <script src="https://kit.fontawesome.com/4ae4c0d5b9.js" crossorigin="anonymous"></script>

    {{block "css" .}} {{end}}


</head>

<body>

    <nav class="navbar fixed-top navbar-expand-sm navbar-dark" style="background-color: midnightblue;">
        <div class="mx-auto" style="width: 10px;"></div>
        <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="collapse"
            data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId" aria-expanded="false"
            aria-label="Toggle navigation"></button>
        <div class="collapse navbar-collapse" id="collapsibleNavId">
            <ul class="navbar-nav me-auto mt-2 mt-lg-0">
                <li class="nav-item" style="color: aliceblue;">
                    <a class="nav-link" href="/" aria-current="page">Breakfast and Bread <span
                            class="visually-hidden">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/about">About</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="/room" id="dropdownId" data-bs-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="false">Rooms</a>
                    <div class="dropdown-menu" aria-labelledby="dropdownId">
                        <a class="dropdown-item" href="/general">General</a>
                        <a class="dropdown-item" href="/major">Major</a>
                    </div>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="/reservation">Book Now!</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Contact</a>
                </li>
            </ul>
        </div>
    </nav>



    {{block "content" .}} {{end}}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script>

        function notify(msg, msgType) {
            notie.alert({
                type: msgType,
                text: msg,
                position: "bottom"
            })
        }

        function sweetAlert(title, html, icon, confirmButtonText) {
            Swal.fire({
                title: title,
                html: html,
                icon: icon,
                confirmButtonText: confirmButtonText,
            })
        }

        function prompt() {

            let toast = function (param) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: param.pos ?? "top-end",
                    showConfirmButton: false,
                    timer: 3000,
                    icon: param.icon ?? "success",
                    title: param.msg ?? "",
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    }
                });
                Toast.fire();
            }

            let success = function (title, msg) {
                Swal.fire({
                    title: title ?? "Success",
                    text: msg ?? "You're awesome",
                    icon: "success"
                });
            }

            let error = function (title, msg) {
                Swal.fire({
                    title: title ?? "Success",
                    text: msg ?? "You're awesome",
                    icon: "error"
                });
            }

            let inputDates = async function (callback) {


                let htmlDate = `

<form name="pickerInside", action="" class="mt-3 needs-validation px-3" method="GET" novalidate>
  <div class="row" id="range-picker-inside">
    <div class="col">

    <div class="mb-3">
      <input disabled type="text" class="form-control" id="start-inside" name="start" aria-describedby="startDate" required placeHolder="Arrival">
      <div class="invalid-feedback">
        Please input a date
      </div>
    </div>

  </div>

  <div class="col">

    <div class="mb-3">
      <input disabled type="text" class="form-control" id="end-inside" name="end" aria-describedby="endDate" required placeHolder="Departure">
      <div class="invalid-feedback">
        Please input a date
      </div>
    </div>

  </div>
</div>

<button type="submit" class="btn btn-primary mt-3">Check for availability</button>


</form>
  `;

                const { value: result } = await Swal.fire({
                    title: "Search for Availability",
                    html: htmlDate,
                    confirmButtonText: "Check for Availabilty",
                    showConfirmButton: false,
                    willOpen: () => {

                        const elem = document.getElementById("range-picker-inside");
                        const rangepicker = new DateRangePicker(elem, {
                            orientation: "top auto",
                            buttonClass: "btn",
                        });

                        const forms = document.querySelectorAll('.needs-validation');
                        Array.from(forms).forEach(form => {

                            form.addEventListener('submit', function (event) {
                                if (!form.checkValidity()) {
                                    event.preventDefault();
                                    event.stopPropagation();

                                } else {
                                    Swal.clickConfirm();
                                }

                                form.classList.add('was-validated');



                            });



                        });
                    },

                    didOpen: () => {
                        const start = document.getElementById("start-inside");
                        start.removeAttribute("disabled");

                        const end = document.getElementById("end-inside");
                        end.removeAttribute("disabled");

                        // document.pickerInside.submit();

                    },

                    preConfirm: () => {
                        return [
                            document.getElementById("start-inside").value,
                            document.getElementById("end-inside").value,
                        ];

                    },



                });

                if (callback === undefined) {
                    return;
                }

                if (result === null) {
                    callback("");
                    return;
                }

                if (result.value === "") {
                    callback("")
                    return;
                }

                if (result.dismiss === Swal.DismissReason.cancel) {
                    callback("");
                    return;
                }

                callback(result);
                return;

            }

            return {
                toast: toast,
                success: success,
                error: error,
                inputDates: inputDates,
            }

        }


    </script>


    {{block "js" .}} {{end}}

</body>




</html>
{{end}}