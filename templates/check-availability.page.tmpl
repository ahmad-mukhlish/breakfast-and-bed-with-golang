{{template "base" .}}

{{define "css"}}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
<link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
{{end}}

{{define "content"}}

<style>
  .red-text {
    color: red;
  }

  .datepicker-picker {
    z-index: 10000;
  }
</style>

<div class="mx-auto mt-5 p-5 col-9">
  <h1> Search for Availability </h1>

  <form action="" class="mt-3 needs-validation" method="GET" novalidate>

    <div class="row" id="range-picker">

      <div class="col">

        <div class="mb-3">
          <label for="start" class="form-label">Start Date</label>
          <input type="text" class="form-control" id="start" name="start" aria-describedby="startDate" required>
          <div class="invalid-feedback">
            Please input a date
          </div>
        </div>

      </div>

      <div class="col">

        <div class="mb-3">
          <label for="end" class="form-label">End Date</label>
          <input type="text" class="form-control" id="end" name="end" aria-describedby="endDate" required>
          <div class="invalid-feedback">
            Please input a date
          </div>
        </div>

      </div>

      <button type="submit" class="btn btn-primary mt-3">Check for availability</button>

    </div>

  </form>



</div>

<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
<script src="https://unpkg.com/notie"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

  let attention = prompt();


  function notify(msg, msgType) {
    notie.alert({
      type: msgType,
      text: msg,
      position: "bottom"
    })
  }

  function sweetAlert(title, html, icon, confirmButtonText) {
    Swal.fire({
      title: title,
      html: html,
      icon: icon,
      confirmButtonText: confirmButtonText,
    })
  }

  function prompt() {

    let toast = function (param) {
      const Toast = Swal.mixin({
        toast: true,
        position: param.pos ?? "top-end",
        showConfirmButton: false,
        timer: 3000,
        icon: param.icon ?? "success",
        title: param.msg ?? "",
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire();
    }

    let success = function (title, msg) {
      Swal.fire({
        title: title ?? "Success",
        text: msg ?? "You're awesome",
        icon: "success"
      });
    }

    let error = function (title, msg) {
      Swal.fire({
        title: title ?? "Success",
        text: msg ?? "You're awesome",
        icon: "error"
      });
    }

    let inputDates = async function () {


      let htmlDate = `

<form name="pickerInside", action="" class="mt-3 needs-validation px-3" method="GET" novalidate>
  <div class="row" id="range-picker-inside">
    <div class="col">

    <div class="mb-3">
      <input disabled type="text" class="form-control" id="start-inside" name="start" aria-describedby="startDate" required placeHolder="Arrival">
      <div class="invalid-feedback">
        Please input a date
      </div>
    </div>

  </div>

  <div class="col">

    <div class="mb-3">
      <input disabled type="text" class="form-control" id="end-inside" name="end" aria-describedby="endDate" required placeHolder="Departure">
      <div class="invalid-feedback">
        Please input a date
      </div>
    </div>

  </div>
</div>

<button type="submit" class="btn btn-primary mt-3">Check for availability</button>


</form>
  `;

      const { value: formValues } = await Swal.fire({
        title: "Search for Availability",
        html: htmlDate,
        confirmButtonText: "Check for Availabilty",
        showConfirmButton: false,
        willOpen: () => {

          const elem = document.getElementById("range-picker-inside");
          const rangepicker = new DateRangePicker(elem, {
            orientation: "top auto",
            buttonClass: "btn",
          });

          const forms = document.querySelectorAll('.needs-validation');
          Array.from(forms).forEach(form => {

            form.addEventListener('submit', function (event) {
              if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();

              } else {
                Swal.clickConfirm();
              }

              form.classList.add('was-validated');



            });



          });
        },

        didOpen: () => {
          const start = document.getElementById("start-inside");
          start.removeAttribute("disabled");

          const end = document.getElementById("end-inside");
          end.removeAttribute("disabled");

          // document.pickerInside.submit();

        },

        preConfirm: () => {



          return [


            document.getElementById("start-inside").value,
            document.getElementById("end-inside").value,
          ];

        },



      });

      if (formValues) {
        Swal.fire(JSON.stringify(formValues));
      }

    }

    return {
      toast: toast,
      success: success,
      error: error,
      inputDates: inputDates,
    }

  }

</script>

{{end}}